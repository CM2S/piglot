"""Driving script for piglot's plotting utilities."""
import os
import time
import argparse
from yaml import safe_load
from yaml.parser import ParserError
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from piglot.yaml_parser import parse_case, parse_parameters
from piglot.plotter import CaseData, plot_case_data, plot_reference_data, CurrentPlot


def parse_config_file(file):
    """Parses the YAML configuration file.

    Parameters
    ----------
    file : TextIOWrapper
        Configuration file object.

    Returns
    -------
    dict
        Dictionary with the YAML data.

    Raises
    ------
    RuntimeError
        When the YAML parsing fails.
    """
    try:
        return safe_load(file)
    except ParserError as exc:
        raise RuntimeError("Failed to parse the configuration file: invalid YAML.") from exc


def plot_case(args):
    """Driver for single-case plotting.

    Parameters
    ----------
    args : dict
        Passed arguments.
    """
    case = CaseData(args.case_file)
    fig, axes_dict = plot_case_data(case)
    if args.config:
        plot_reference_data(case, parse_config_file(args.config), fig, axes_dict)
    if args.save_fig:
        fig.savefig(args.save_fig)
    else:
        plt.show()


def plot_current(args):
    """Driver for plotting the currently running case.

    Parameters
    ----------
    args : dict
        Passed arguments.
    """
    plt.ion()
    config = parse_config_file(args.config)
    plots = [CurrentPlot(parse_case(name, case), config) for name, case in config["cases"].items()]
    while True:
        for plot in plots:
            plot.update()
        time.sleep(args.rate)


def plot_best(args):
    """Driver for plotting the best function call so far.

    Parameters
    ----------
    args : dict
        Passed arguments.
    """
    config = parse_config_file(args.config)
    func_calls_file = os.path.join(config["output"], "func_calls")
    df = pd.read_table(func_calls_file)
    df.columns = df.columns.str.strip()
    min_series = df.iloc[df["Loss"].idxmin()]
    call_hash = min_series["Hash"]
    print("Best run:")
    print(min_series)
    for case in config["cases"].keys():
        case_file = os.path.join(config["output"], "cases_hist", f"{case}-{call_hash}")
        case_data = CaseData(case_file)
        fig, axes_dict = plot_case_data(case_data, case)
        plot_reference_data(case_data, config, fig, axes_dict)
    if args.save_fig:
        fig.savefig(args.save_fig)
    else:
        plt.show()


def dump_run(args):
    """Dump the normalised parameter history to a file.

    Parameters
    ----------
    args : dict
        Passed arguments.
    """
    config = parse_config_file(args.config)
    parameters = parse_parameters(config)
    func_calls_file = os.path.join(config["output"], "func_calls")
    df = pd.read_table(func_calls_file)
    df.columns = df.columns.str.strip()
    out_df = df.iloc[:,3:-1]
    out_df = out_df.apply(lambda x: parameters.normalise(x), axis=1, result_type='expand')
    out_df["Loss"] = df["Loss"]
    np.savetxt(args.name, out_df.to_numpy())
    if not args.quiet:
        print(f"Saved parameter history to {args.name}")


def plot_regret(args):
    """Plot the cummulative regret evolution for a given set of cases.

    Parameters
    ----------
    args : dict
        Passed arguments.
    """
    fig, ax = plt.subplots()
    if args.time:
        ax.set_xlabel('Elapsed time /s')
    else:
        ax.set_xlabel('Function calls')
    ax.set_ylabel('Cummulative regret')

    for config_file in args.config:
        with open(config_file, 'r') as file:
            config = parse_config_file(file)
        func_calls_file = os.path.join(config["output"], "func_calls")
        df = pd.read_table(func_calls_file)
        df.columns = df.columns.str.strip()
        losses = df["Loss"].to_numpy()
        best_loss = np.min(losses) - 1e-6
        regret = np.empty_like(losses)
        for i in range(len(losses)):
            regret[i] = np.sum(losses[:i+1]) - (i + 1) * best_loss
        if args.time:
            ax.plot(df["Start Time /s"], regret, label=config_file)
            # ax.set_xlim(xmin=0, xmax=max(df["Start Time /s"]))
        else:
            ax.plot(regret, label=config_file)
            # ax.set_xlim(xmin=0, xmax=len(regret) + 1)
    ax.legend()
    if args.save_fig:
        fig.savefig(args.save_fig)
    else:
        plt.show()



def main():
    """Entry point for this script."""
    # Global argument parser settings
    parser = argparse.ArgumentParser(
        prog='piglot-plot',
        description='Plotting utility for piglot',
    )
    subparsers = parser.add_subparsers(
        title='Available modes',
        description=("To get additional information for a given command and available "
                     "options, run piglot-plot command --help"),
    )

    # Standard plotting methods
    sp_case = subparsers.add_parser(
        'case',
        help='plot a single case file',
        description='Plot a single case file.',
    )
    sp_case.add_argument(
        'case_file',
        type=str,
        help="Path for the case file to plot.",
    )
    sp_case.add_argument(
        '--config',
        default=None,
        type=argparse.FileType('r'),
        help=("Path for the used or generated configuration file. "
              "Useful for plotting the references for each field alongside the response."),
    )
    sp_case.add_argument(
        '--save_fig',
        default=None,
        type=str,
        help=("Path to save the generated figure. If used, graphical output is skipped."),
    )
    sp_case.set_defaults(func=plot_case)

    # Plotting current run
    sp_current = subparsers.add_parser(
        'current',
        help='plot the currently running function call',
        description=("Plot the currently running function call. This must be executed in "
                     "the same path as the running piglot instance."),
    )
    sp_current.add_argument(
        'config',
        type=argparse.FileType('r'),
        help="Path for the used or generated configuration file.",
    )
    sp_current.add_argument(
        '--rate',
        default=1.0,
        type=float,
        help='Plot update rate, in seconds (defaults to 1.0).',
    )
    sp_current.set_defaults(func=plot_current)

    # Plotting best run so far
    sp_best = subparsers.add_parser(
        'best',
        help='plot the best response so far',
        description=("Plot the best response so far. This must be executed in "
                     "the same path as the running piglot instance."),
    )
    sp_best.add_argument(
        'config',
        type=argparse.FileType('r'),
        help="Path for the used or generated configuration file.",
    )
    sp_best.add_argument(
        '--save_fig',
        default=None,
        type=str,
        help=("Path to save the generated figure. If used, graphical output is skipped."),
    )
    sp_best.set_defaults(func=plot_best)

    # Dumping the parameter history
    sp_dump = subparsers.add_parser(
        'dump',
        help='dump the internal parameter history to a file',
        description=("Dump the internal parameter history to a file. This must be "
                     "executed in the same path as the running piglot instance."),
    )
    sp_dump.add_argument(
        'config',
        type=argparse.FileType('r'),
        help="Path for the used or generated configuration file.",
    )
    sp_dump.add_argument(
        'name',
        type=str,
        help="Output file.",
    )
    sp_dump.add_argument(
        '--quiet',
        action='store_true',
    )
    sp_dump.set_defaults(func=dump_run)

    # Plotting cummulative regret measures
    sp_regret = subparsers.add_parser(
        'regret',
        help='plot the cummulative regret of a case',
        description=("Plot the cummulative regret of a case. This must be "
                     "executed in the same path as the running piglot instance."),
    )
    sp_regret.add_argument(
        'config',
        nargs='+',
        type=str,
        help="Path for the used or generated configuration file.",
    )
    sp_regret.add_argument(
        '--save_fig',
        default=None,
        type=str,
        help=("Path to save the generated figure. If used, graphical output is skipped."),
    )
    sp_regret.add_argument(
        '--time',
        action='store_true',
        help="Plot w.r.t. the elapsed time"
    )
    sp_regret.set_defaults(func=plot_regret)

    args = parser.parse_args()
    args.func(args)


if __name__ == '__main__':
    main()
